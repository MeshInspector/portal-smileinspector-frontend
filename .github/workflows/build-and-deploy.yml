name: Build and Deploy

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target deployment environment'
        required: true
        type: choice
        options:
          - 'dev'
          - 'qa'
          - 'prod'
        default: 'dev'

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '24'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build
        run: npm run build -- --mode=${{ inputs.environment }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ vars.AWS_DEPLOY_ROLE_ARN }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Init
        working-directory: terraform/envs/${{ inputs.environment }}
        run: terraform init -input=false

      - name: Terraform Apply
        working-directory: terraform/envs/${{ inputs.environment }}
        run: terraform apply -auto-approve -input=false

      - name: Read Terraform Outputs
        id: tf_outputs
        working-directory: terraform/envs/${{ inputs.environment }}
        run: |
          echo "s3_bucket_id=$(terraform output -raw s3_bucket_id)" >> "$GITHUB_OUTPUT"
          echo "distribution_id=$(terraform output -raw cloudfront_distribution_id)" >> "$GITHUB_OUTPUT"

      - name: Deploy to S3
        run: |
          aws s3 sync dist/ s3://${{ steps.tf_outputs.outputs.s3_bucket_id }} --delete

      - name: Invalidate CloudFront cache
        run: |
          aws cloudfront create-invalidation --distribution-id ${{ steps.tf_outputs.outputs.distribution_id }} --paths "/*"
